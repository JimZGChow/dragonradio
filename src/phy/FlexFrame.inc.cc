#include "Logger.hh"
#include "phy/FlexFrame.inc.hh"

FlexFrame::Modulator::Modulator(FlexFrame &phy)
  : LiquidModulator(phy)
  , myphy_(phy)
{
    std::lock_guard<std::mutex> lck(liquid_mutex);

    flexframe(genprops_init_default)(&fgprops_);
    fg_ = flexframe(gen_create)(&fgprops_);

#if LIQUID_VERSION_NUMBER >= 1003001
    flexframe(genprops_s) header_props { phy.header_mcs_.check
                                       , phy.header_mcs_.fec0
                                       , phy.header_mcs_.fec1
                                       , phy.header_mcs_.ms
                                       };

    flexframe(gen_set_header_props)(fg_, &header_props);
    flexframe(gen_set_header_len)(fg_, sizeof(Header));
#endif /* LIQUID_VERSION_NUMBER >= 1003001 */
}

FlexFrame::Modulator::~Modulator()
{
    flexframe(gen_destroy)(fg_);
}

void FlexFrame::Modulator::print(void)
{
    flexframe(gen_print)(fg_);
}

void FlexFrame::Modulator::update_props(const TXParams &params)
{
    if (fgprops_.check != params.mcs.check ||
        fgprops_.fec0 != params.mcs.fec0 ||
        fgprops_.fec1 != params.mcs.fec1 ||
        fgprops_.mod_scheme != params.mcs.ms) {
        fgprops_.check = params.mcs.check;
        fgprops_.fec0 = params.mcs.fec0;
        fgprops_.fec1 = params.mcs.fec1;
        fgprops_.mod_scheme = params.mcs.ms;

        flexframe(gen_setprops)(fg_, &fgprops_);
    }
}

void FlexFrame::Modulator::assemble(unsigned char *hdr, NetPacket& pkt)
{
    update_props(*(pkt.tx_params));
    flexframe(gen_reset)(fg_);
    flexframe(gen_assemble)(fg_, hdr, pkt.data(), pkt.size());
}

// Number of samples generated by a call to flexframegen_write_samples.
const size_t NGEN = 2;

size_t FlexFrame::Modulator::maxModulatedSamples(void)
{
    return NGEN;
}

bool FlexFrame::Modulator::modulateSamples(std::complex<float> *buf, size_t &nw)
{
    nw = NGEN;

#if LIQUID_VERSION_NUMBER >= 1003000 && defined(NEWFLEXFRAME)
    return flexframe(gen_write_samples)(fg_, buf, NGEN);
#else /* LIQUID_VERSION_NUMBER < 1003000 */
    return flexframe(gen_write_samples)(fg_, buf);
#endif /* LIQUID_VERSION_NUMBER < 1003000 */
}

FlexFrame::Demodulator::Demodulator(FlexFrame &phy)
  : LiquidDemodulator(phy)
{
    std::lock_guard<std::mutex> lck(liquid_mutex);

    fs_ = flexframe(sync_create)(&LiquidDemodulator::liquid_callback, this);

#if LIQUID_VERSION_NUMBER >= 1003001
    flexframe(genprops_s) header_props { phy.header_mcs_.check
                                       , phy.header_mcs_.fec0
                                       , phy.header_mcs_.fec1
                                       , phy.header_mcs_.ms
                                       };

    flexframe(sync_set_header_props)(fs_, &header_props);
    flexframe(sync_set_header_len)(fs_, sizeof(Header));
    flexframe(sync_decode_header_soft)(fs_, phy.soft_header_);
    flexframe(sync_decode_payload_soft)(fs_, phy.soft_payload_);
#endif /* LIQUID_VERSION_NUMBER >= 1003001 */
}

FlexFrame::Demodulator::~Demodulator()
{
    flexframe(sync_destroy)(fs_);
}

void FlexFrame::Demodulator::print(void)
{
    flexframe(sync_print)(fs_);
}

void FlexFrame::Demodulator::liquidReset(void)
{
    flexframe(sync_reset)(fs_);
}

void FlexFrame::Demodulator::demodulateSamples(std::complex<float> *buf, const size_t n)
{
    flexframe(sync_execute)(fs_, buf, n);
}

std::unique_ptr<PHY::Demodulator> FlexFrame::make_demodulator(void)
{
    return std::unique_ptr<PHY::Demodulator>(static_cast<PHY::Demodulator*>(new Demodulator(*this)));
}

std::unique_ptr<PHY::Modulator> FlexFrame::make_modulator(void)
{
    return std::unique_ptr<PHY::Modulator>(static_cast<PHY::Modulator*>(new Modulator(*this)));
}
