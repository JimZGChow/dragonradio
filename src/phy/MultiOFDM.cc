#include "Liquid.hh"
#include "Logger.hh"
#include "MultiOFDM.hh"

// Number of channels. We only use 1!
const unsigned int NUM_CHANNELS = 1;

// liquid fixes the header size at 8 bytes
static_assert(sizeof(Header) <= 8, "sizeof(Header) must be no more than 8 bytes");

union PHYHeader {
    Header        h;
    // OFDMFLEXFRAME_H_USER in liquid.internal.h
    unsigned char bytes[8];
};

MultiOFDM::Modulator::Modulator(MultiOFDM& phy) :
    _phy(phy)
{
    std::lock_guard<std::mutex> lck(liquid_mutex);

    // modem setup (list is for parallel demodulation)
    _mctx = std::make_unique<multichanneltx>(NUM_CHANNELS,
                                             _phy._M,
                                             _phy._cp_len,
                                             _phy._taper_len,
                                             _phy._p);
}

MultiOFDM::Modulator::~Modulator()
{
}

// Number of samples generated by a call to GenerateSamples.
const size_t NGEN = 2;

// Initial sample buffer size
const size_t MODBUF_SIZE = 16384;

std::unique_ptr<ModPacket> MultiOFDM::Modulator::modulate(std::unique_ptr<NetPacket> pkt)
{
    PHYHeader header;

    memset(&header, 0, sizeof(header));

    header.h.src = pkt->src;
    header.h.dest = pkt->dest;
    header.h.pkt_id = pkt->pkt_id;
    header.h.pkt_len = pkt->size();

    pkt->resize(std::max((size_t) pkt->size(), _phy._minPacketSize));

    _mctx->UpdateData(0,
                      header.bytes,
                      pkt->data(),
                      pkt->size(),
                      pkt->ms,
                      pkt->fec0,
                      pkt->fec1);

    // Buffer holding generated IQ samples
    auto iqbuf = std::make_unique<IQBuf>(MODBUF_SIZE);
    // Number of generated samples in the buffer
    size_t nsamples = 0;
    // Local copy of gain
    const float g = pkt->g;

    while (!_mctx->IsChannelReadyForData(0)) {
        _mctx->GenerateSamples(&(*iqbuf)[nsamples]);

        // Apply soft gain. Note that this is where nsamples is incremented.
        for (unsigned int i = 0; i < NGEN; i++)
            (*iqbuf)[nsamples++] *= g;

        // If we can't add another NGEN samples to the current IQ buffer, resize
        // it.
        if (nsamples + NGEN > iqbuf->size())
            iqbuf->resize(2*iqbuf->size());
    }

    // Resize the final buffer to the number of samples generated.
    iqbuf->resize(nsamples);

    // Construct and return the ModPacket
    auto mpkt = std::make_unique<ModPacket>();

    mpkt->samples = std::move(iqbuf);
    mpkt->pkt = std::move(pkt);

    return mpkt;
}

MultiOFDM::Demodulator::Demodulator(MultiOFDM& phy) :
    LiquidDemodulator([&phy](Header& hdr) { return phy._net->wantPacket(hdr.dest); } ),
    _phy(phy)
{
    _resamp_fact = 2;

    std::lock_guard<std::mutex> lck(liquid_mutex);

    // modem setup (list is for parallel demodulation)
    framesync_callback callback[1] = { &LiquidDemodulator::liquid_callback };
    void               *userdata[1] = { this };

    mcrx = std::make_unique<multichannelrx>(NUM_CHANNELS,
                                            _phy._M,
                                            _phy._cp_len,
                                            _phy._taper_len,
                                            _phy._p,
                                            userdata,
                                            callback);
}

MultiOFDM::Demodulator::~Demodulator()
{
}

void MultiOFDM::Demodulator::reset(Clock::time_point timestamp, size_t off)
{
    mcrx->Reset();

    _demod_start = timestamp;
    _demod_off = off;
}

void MultiOFDM::Demodulator::demodulate(std::complex<float>* data,
                                        size_t count,
                                        std::function<void(std::unique_ptr<RadioPacket>)> callback)
{
    _callback = callback;

    mcrx->Execute(data, count);
}

std::unique_ptr<PHY::Demodulator> MultiOFDM::make_demodulator(void)
{
    return std::unique_ptr<PHY::Demodulator>(static_cast<PHY::Demodulator*>(new Demodulator(*this)));
}

std::unique_ptr<PHY::Modulator> MultiOFDM::make_modulator(void)
{
    return std::unique_ptr<PHY::Modulator>(static_cast<PHY::Modulator*>(new Modulator(*this)));
}
