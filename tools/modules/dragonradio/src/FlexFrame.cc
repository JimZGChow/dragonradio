#include "FlexFrame.hh"

FlexFrameModulator::FlexFrameModulator()
{
    std::lock_guard<std::mutex> lck(liquid_mutex);

    origflexframegenprops_init_default(&fgprops_);
    fg_ = origflexframegen_create(&fgprops_);

    setHeaderMCS(header_mcs_);
}

FlexFrameModulator::~FlexFrameModulator()
{
    origflexframegen_destroy(fg_);
}

void FlexFrameModulator::setHeaderMCS(const MCS &mcs)
{
    header_mcs_ = mcs;

    origflexframegenprops_s header_props;

    mcs2flexframegenprops(header_mcs_, header_props);
    origflexframegen_set_header_props(fg_, &header_props);
    origflexframegen_set_header_len(fg_, sizeof(Header));
}

void FlexFrameModulator::setPayloadMCS(const MCS &mcs)
{
    payload_mcs_ = mcs;

    mcs2flexframegenprops(mcs, fgprops_);
    origflexframegen_setprops(fg_, &fgprops_);
}

void FlexFrameModulator::assemble(const void *header, const void *payload, const size_t payload_len)
{
    origflexframegen_reset(fg_);
    origflexframegen_assemble(fg_,
                              static_cast<unsigned char*>(const_cast<void *>(header)),
                              static_cast<unsigned char*>(const_cast<void *>(payload)),
                              payload_len);
}

// Number of samples generated by a call to origflexframegen_write_samples.
const size_t NGEN = 2;

size_t FlexFrameModulator::maxModulatedSamples(void)
{
    return NGEN;
}

bool FlexFrameModulator::modulateSamples(std::complex<float> *buf, size_t &nw)
{
    nw = NGEN;

    return origflexframegen_write_samples(fg_, buf);
}

FlexFrameDemodulator::FlexFrameDemodulator(bool soft_header,
                                           bool soft_payload)
  : Demodulator(soft_header, soft_payload)
{
    std::lock_guard<std::mutex> lck(liquid_mutex);

    fs_ = origflexframesync_create(&Demodulator::liquid_callback,
                                   this);

    setHeaderMCS(header_mcs_);
}

FlexFrameDemodulator::~FlexFrameDemodulator()
{
    origflexframesync_destroy(fs_);
}

void FlexFrameDemodulator::setHeaderMCS(const MCS &mcs)
{
    header_mcs_ = mcs;

    origflexframegenprops_s header_props;

    mcs2flexframegenprops(header_mcs_, header_props);
    origflexframesync_set_header_props(fs_, &header_props);
    origflexframesync_set_header_len(fs_, sizeof(Header));

    origflexframesync_decode_header_soft(fs_, soft_header_);
    origflexframesync_decode_payload_soft(fs_, soft_payload_);
}

void FlexFrameDemodulator::reset(void)
{
    origflexframesync_reset(fs_);
}

void FlexFrameDemodulator::demodulateSamples(const std::complex<float> *buf, const size_t n)
{
    origflexframesync_execute(fs_, const_cast<std::complex<float>*>(buf), n);
}
